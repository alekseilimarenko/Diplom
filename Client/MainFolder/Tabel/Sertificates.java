package umec.Tabel;

import TCPConnect.TCPSender;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.net.ConnectException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Sertificates extends JDialog
{
    //<editor-fold defaultstate="collapsed" desc="объявление переменных">
    private javax.swing.JPanel AddSertPanel;
    private javax.swing.JButton Cancel_Button;
    private javax.swing.JLabel DateIssueLabel;
    private javax.swing.JTextField DateIssueTextField;
    private javax.swing.JLabel ExpireDateLabel;
    private javax.swing.JTextField ExpireDateTextField;
    private javax.swing.JLabel LNameLabel;
    private javax.swing.JPanel LNamePanel;
    private javax.swing.JLabel NewSertificatLabel;
    private javax.swing.JLabel NumSertLabel;
    private javax.swing.JTextField NumSertTextField;
    private javax.swing.JList PersonList;
    private javax.swing.JButton AddNewSert_Button;
    private javax.swing.JPanel SectificatPanel;
    private javax.swing.JLabel SertificatLabel;
    private javax.swing.JTable SertTable;
    private javax.swing.JLabel SpecSertLabel;
    private javax.swing.JTextArea SpechTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private TCPSender sender;
    private String doc;
//</editor-fold>
    
    //конструктор формы
    public Sertificates(java.awt.Frame parent, boolean modal, TCPSender sn) 
    {
        super(parent, modal);
        this.sender = sn;
        initComponents();
    }

    //<editor-fold defaultstate="collapsed" desc="создание компонентов окна">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents()
    {
        LNamePanel = new javax.swing.JPanel();
        LNameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PersonList = new javax.swing.JList();
        SectificatPanel = new javax.swing.JPanel();
        SertificatLabel = new javax.swing.JLabel();
        SertTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        AddSertPanel = new javax.swing.JPanel();
        NewSertificatLabel = new javax.swing.JLabel();
        NumSertLabel = new javax.swing.JLabel();
        NumSertTextField = new javax.swing.JTextField();
        DateIssueLabel = new javax.swing.JLabel();
        DateIssueTextField = new javax.swing.JTextField();
        SpecSertLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        SpechTextArea = new javax.swing.JTextArea();
        AddNewSert_Button = new javax.swing.JButton();
        Cancel_Button = new javax.swing.JButton();
        ExpireDateLabel = new javax.swing.JLabel();
        ExpireDateTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Внесение сертификатов в базу данных");
        
        //определение размера окна
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        
        if(frameSize.height > screenSize.height)
        {
            frameSize.height = screenSize.height;
        }
        
        if(frameSize.width > screenSize.width)
        {
            frameSize.width = screenSize.width;
        }
        
        //установка положения окна
        this.setLocation((screenSize.width - frameSize.width) / 5, 
                (screenSize.height - frameSize.height) / 5);

        LNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        LNameLabel.setText("Выберите фамилию :");
        
        PersonList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                PersonalListMouseClicked();
            }
        });

        jScrollPane1.setViewportView(PersonList);

        javax.swing.GroupLayout LNamePanelLayout = new javax.swing.GroupLayout(LNamePanel);
        LNamePanel.setLayout(LNamePanelLayout);
        LNamePanelLayout.setHorizontalGroup(
            LNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LNamePanelLayout.setVerticalGroup(
            LNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        SectificatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        SertificatLabel.setText("Сертификаты : ");
        
        SertTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {"№", "Специализация"}
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };
        });
        jScrollPane2.setViewportView(SertTable);
        if (SertTable.getColumnModel().getColumnCount() > 0) {
            SertTable.getColumnModel().getColumn(0).setMinWidth(50);
            SertTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            SertTable.getColumnModel().getColumn(0).setMaxWidth(60);
            SertTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        }
        
        SertTable.addMouseListener(new java.awt.event.MouseAdapter(){
            public void mouseClicked(java.awt.event.MouseEvent evt){
                SertTableMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout SectificatPanelLayout = new javax.swing.GroupLayout(SectificatPanel);
        SectificatPanel.setLayout(SectificatPanelLayout);
        SectificatPanelLayout.setHorizontalGroup(
            SectificatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SectificatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SectificatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SectificatPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(SectificatPanelLayout.createSequentialGroup()
                        .addComponent(SertificatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addGap(151, 151, 151))))
        );
        SectificatPanelLayout.setVerticalGroup(
            SectificatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SectificatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SertificatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AddSertPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        NewSertificatLabel.setText("Внесение нового сертификата  : ");

        NumSertLabel.setText("Номер сертификата :");

        DateIssueLabel.setText("Дата выдачи: ");
        
        DateIssueTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focuLost(java.awt.event.FocusEvent evt){
                DateTextFieldFocusLost(evt);
            }
        });
        
        DateIssueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldKeyTyped(evt);
            }
        });

        SpecSertLabel.setText("Специализация : ");

        SpechTextArea.setColumns(20);
        SpechTextArea.setLineWrap(true);
        SpechTextArea.setRows(5);
        SpechTextArea.setWrapStyleWord(true);
        
        SpechTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextAreaKeyTyped(evt);
            }
        });
        
        jScrollPane3.setViewportView(SpechTextArea);
        
        AddNewSert_Button.setText("Сохранить");
        AddNewSert_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewSert_ButtonActionPerformed(evt);
            }
        });

        Cancel_Button.setText("Отмена");
        Cancel_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel_ButtonActionPerformed(evt);
            }
        });

        ExpireDateLabel.setText("Действителен до :");
        
        ExpireDateTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focuLost(java.awt.event.FocusEvent evt){
                DateTextFieldFocusLost(evt);
            }
        });
        
        ExpireDateTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout AddSertPanelLayout = new javax.swing.GroupLayout(AddSertPanel);
        AddSertPanel.setLayout(AddSertPanelLayout);
        AddSertPanelLayout.setHorizontalGroup(
            AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddSertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddSertPanelLayout.createSequentialGroup()
                        .addGroup(AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DateIssueLabel)
                            .addComponent(NumSertLabel)
                            .addComponent(ExpireDateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(DateIssueTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ExpireDateTextField)
                            .addComponent(NumSertTextField)))
                    .addComponent(NewSertificatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(AddSertPanelLayout.createSequentialGroup()
                        .addComponent(SpecSertLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(AddSertPanelLayout.createSequentialGroup()
                        .addComponent(AddNewSert_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Cancel_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        AddSertPanelLayout.setVerticalGroup(
            AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddSertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NewSertificatLabel)
                .addGap(18, 18, 18)
                .addGroup(AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumSertLabel)
                    .addComponent(NumSertTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateIssueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateIssueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExpireDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExpireDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(SpecSertLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(AddSertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddNewSert_Button)
                    .addComponent(Cancel_Button))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SectificatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddSertPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SectificatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddSertPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        
        FillDoctorList();
        
        pack();
    }
//</editor-fold>
    
    //проверка симоволов вводимых в текстовое поле
    private void TextAreaKeyTyped(KeyEvent evt) 
    {
        char c = evt.getKeyChar();
        
        if(Character.isDigit(c) || (c == KeyEvent.VK_DELETE))
        {
            getToolkit().beep();
            evt.consume();
        }
    }
    
    //проверка вводимых цифр
    private void TextFieldKeyTyped(KeyEvent evt)
    {
        char c = evt.getKeyChar();
        
        if(c == (char)'/')
        {
            return;
        }
        
        if(!Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))
        {
            getToolkit().beep();
            evt.consume();
        }
    }
    
    //заполнение списка фамилий докторов
    private void FillDoctorList() 
    {
        try
        {
            //проверка соединения с сервером
            if(sender.SendTextToServer("Hello").equals(""))
            {
                sender.TryConnent();
            }

            //отправка запроса на сервер для заполнения jList со списком профессий
            PersonList.setModel(new javax.swing.AbstractListModel()
            {
                String[] strings = sender.SendTextToServer("getLName_Doc").split("/");
                public int getSize() { return strings.length; }
                public Object getElementAt(int i) { return strings[i]; }
            });
        }
        catch(ConnectException conExc)
        {
            JOptionPane.showMessageDialog(this, "Связь с сервером отсутствует", 
                    "Ошибка соединения", JOptionPane.ERROR_MESSAGE);
            System.out.println(conExc.getMessage());
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    //обработчик клика по строке списка персонала
    private void PersonalListMouseClicked()
    {
        NumSertTextField.setText("");
        DateIssueTextField.setText("");
        ExpireDateTextField.setText("");
        SpechTextArea.setText("");
        SpechTextArea.setText("");
        SpechTextArea.setEditable(true);
        
        doc = (String) PersonList.getSelectedValue();
        
        try
        {
            //проверка соединения с сервером
            if(sender.SendTextToServer("Hello").equals(""))
            {
                sender.TryConnent();
            }

            //отправка запроса на сервер для заполнения списка сертификатов выбранного доктора
            String srt = sender.SendTextToServer("getListSert_" + doc);
            
            DefaultTableModel defSertTableModel = (DefaultTableModel) SertTable.getModel();
            
            if(srt.equals("null"))
            {
                JOptionPane.showMessageDialog(this, "У выбранного доктора сертификаты отсутствуют", 
                    "Внимание", JOptionPane.INFORMATION_MESSAGE);
                while(defSertTableModel.getRowCount() > 0) defSertTableModel.removeRow(0);
                
                return;
            }
            
            if(defSertTableModel.getRowCount() > 0)
            {
                while(defSertTableModel.getRowCount() > 0) defSertTableModel.removeRow(0);
            }
            
            String[] sertList = srt.split(";");
            
            for(String sert : sertList)
            {
                String[] ns = sert.split("/");
                defSertTableModel.addRow(new Object[] {ns[0], ns[1]});
            }
            
        }
        catch(ConnectException conExc)
        {
            JOptionPane.showMessageDialog(this, "Связь с сервером отсутствует", 
                    "Ошибка соединения", JOptionPane.ERROR_MESSAGE);
            System.out.println(conExc.getMessage());
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }
    
    //обработчик клика по строке списка сертификатов
    private void SertTableMouseClicked(MouseEvent evt)
    {
        try
        {
            //проверка соединения с сервером
            if(sender.SendTextToServer("Hello").equals(""))
            {
                sender.TryConnent();
            }

            //отправка запроса на сервер для заполнения jList со списком профессий
            String[] strings = sender.SendTextToServer("getSert_" + SertTable.getValueAt(SertTable.getSelectedRow(), 0)).split("#");
            
            NumSertTextField.setText(SertTable.getValueAt(SertTable.getSelectedRow(),0).toString());
            DateIssueTextField.setText(strings[0]);
            ExpireDateTextField.setText(strings[1]);
            SpechTextArea.setText(SertTable.getValueAt(SertTable.getSelectedRow(),1).toString());
            SpechTextArea.setEditable(false);
        }
        catch(ConnectException conExc)
        {
            JOptionPane.showMessageDialog(this, "Связь с сервером отсутствует", 
                    "Ошибка соединения", JOptionPane.ERROR_MESSAGE);
            System.out.println(conExc.getMessage());
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
       
    //валидация дня рождения
    private void DateTextFieldFocusLost(java.awt.event.FocusEvent evt)
    {
        String Date_Pattern = "(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\d\\d)";
        
        Pattern pattern = Pattern.compile(Date_Pattern);
        
        java.awt.TextField tf = (java.awt.TextField)evt.getSource();
        
        String date = tf.getText();
        Matcher matcher = pattern.matcher(date);

        if(matcher.matches())
        {
	    matcher.reset();
			  
            if(matcher.find())
            {
	        String day = matcher.group(1);
                String month = matcher.group(2);
                int year = Integer.parseInt(matcher.group(3));
				 
                if (day.equals("31") && (month.equals("4") || month .equals("6")
                        || month.equals("9") || month.equals("11") || month.equals("04")
                        || month .equals("06") || month.equals("09")))
                {
                    JOptionPane.showMessageDialog(this, "Неправильное количество дней", 
                    "Ошибка", JOptionPane.ERROR_MESSAGE);
                    AddNewSert_Button.setEnabled(false);                      // only 1,3,5,7,8,10,12 has 31 days
                } 
                else if (month.equals("2") || month.equals("02")) 
                {
                    //leap year
                    if(year % 4==0)
                    {
                        if(day.equals("30") || day.equals("31"))
                        {
                            JOptionPane.showMessageDialog(this, "Неправильное количество дней", 
                            "Ошибка", JOptionPane.ERROR_MESSAGE);
                            AddNewSert_Button.setEnabled(false);
			}
                        else
                        {
                            AddNewSert_Button.setEnabled(true);
			}
                    }
                    else
                    {
		        if(day.equals("29") || day.equals("30") || day.equals("31"))
                        {
                            JOptionPane.showMessageDialog(this, "Неправильное количество дней", 
                            "Ошибка", JOptionPane.ERROR_MESSAGE);
                            AddNewSert_Button.setEnabled(false);
			}
                        else
                        {
                            AddNewSert_Button.setEnabled(true);
			}
                    }
                }
                else
                {				 
                    AddNewSert_Button.setEnabled(true);				 
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Неправильный формат даты", 
                    "Ошибка", JOptionPane.ERROR_MESSAGE);
                AddNewSert_Button.setEnabled(false);
            }		  
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Неправильный формат даты", 
                    "Ошибка", JOptionPane.ERROR_MESSAGE);
            AddNewSert_Button.setEnabled(false);
        }			    
    }
    
    //обработчик нажатия на кнопку сохранения введенной информации
    private void AddNewSert_ButtonActionPerformed(ActionEvent evt)
    {
        String answer = "";
        
        try
        {
            //проверка соединения с сервером
            if(sender.SendTextToServer("Hello").equals(""))
            {
                sender.TryConnent();
            }

            if(NumSertTextField.getText().trim().equals("") || DateIssueTextField.getText().trim().equals("")
                || SpechTextArea.getText().trim().equals("") || ExpireDateTextField.getText().trim().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Вы не заполнили все поля", 
                        "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                answer = sender.SendTextToServer("addSert_" + doc + "#" 
                                            + NumSertTextField.getText().trim() + "#" 
                                            + DateIssueTextField.getText().trim() + "#"
                                            + ExpireDateTextField.getText().trim() + "#"
                                            + SpechTextArea.getText().trim());
            }

            if(answer.equals("INS"))
            {
                JOptionPane.showMessageDialog(this, "Данные успешно добавлены в базу", 
                    "Внимание", JOptionPane.INFORMATION_MESSAGE);
                PersonalListMouseClicked();
            }
            if(answer.equals("UPD"))
            {
                JOptionPane.showMessageDialog(this, "Данные успешно обновлены", 
                        "Внимание", JOptionPane.INFORMATION_MESSAGE);
                PersonalListMouseClicked();
            }
            
            if(answer.equals("NO"))
                JOptionPane.showMessageDialog(this, "Ошибка добавления даных в базу", 
                        "Ошибка", JOptionPane.ERROR_MESSAGE);

            NumSertTextField.setText("");
            DateIssueTextField.setText("");
            SpechTextArea.setText("");
            ExpireDateTextField.setText("");
        }
        catch(ConnectException conExc)
        {
            JOptionPane.showMessageDialog(this, "Связь с сервером отсутствует", 
                    "Ошибка соединения", JOptionPane.ERROR_MESSAGE);
            System.out.println(conExc.getMessage());
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    //обработчик нажатия на кнопку отмены
    private void Cancel_ButtonActionPerformed(ActionEvent evt) 
    {
        this.dispose();
    }
}
